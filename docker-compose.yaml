services:

  chain:
    image: gcr.io/mineonlium/chain:latest
    ports:
      # HTTP server / GraphQL API
      - 9545:9545
      # WebSocket
      - 9546:9546
      # Network listening port (P2P networking)
      - 30301:30301
    command:
      [
      "--port=30301",
      "--http",
      "--http.port=9545",
      "--http.addr=0.0.0.0",
      "--http.api=personal,eth,net,trace,web3,txpool,miner,admin,clique",
      "--http.corsdomain='*'",
      "--http.vhosts='*'",
      "--ws",
      "--ws.port=9546",
      "--ws.addr=0.0.0.0",
      "--ws.api=personal,eth,net,trace,web3,txpool,miner,admin,clique",
      "--ws.origins='*'",
      "--allow-insecure-unlock",  
      "--syncmode=full",
      "--nodiscover",
      "--mine",
      "--miner.etherbase=0x5bbfa5724260Cb175cB39b24802A04c3bfe72eb3",
      ]
      


# Blockscout postgres database
  db:
    image: postgres:14
    command: -c shared_buffers=1024MB -c max_connections=200
    restart: always
    container_name: 'postgres'
    healthcheck:
      test: [ "CMD", "pg_isready"]
      timeout: 45s
      interval: 10s
      retries: 10
    environment:
        POSTGRES_PASSWORD: ''
        POSTGRES_USER: 'postgres'
        POSTGRES_HOST_AUTH_METHOD: 'trust'
    # Uncomment the following line to persist the database 
    # Dont forget the volume in the bottom of the file as well
    # volumes:
    #   - postgres-data:/var/lib/postgresql/data
    ports:
      - 7432:5432

# # Redis db
  redis_db:
    image: 'redis:alpine'
    ports:
      - 6379:6379
    command: redis-server
    volumes:
      - redis-data:/data

# # Blockscout blockscanner
  blockscout:
    image: tmjeff/moscout
    restart: always
    depends_on:
      db:
        condition: service_healthy  
    container_name: 'blockscout'
    links:
      - db:database
    command: bash -c "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    # env_file:
    #   -  ./envs/common-blockscout.env
    environment:
        ETHEREUM_JSONRPC_VARIANT: 'geth'
        ETHEREUM_JSONRPC_HTTP_URL: http://chain:9545
        BLOCKSCOUT_HOST: 0.0.0.0
        PORT: 4003
        ETHEREUM_JSONRPC_WS_URL: ws://chain:9546/
        INDEXER_DISABLE_PENDING_TRANSACTIONS_FETCHER: 'true'
        FETCH_REWARDS_WAY: trace_block
        DATABASE_URL: postgresql://postgres:@db:5432/blockscout?ssl=false
        ECTO_USE_SSL: 'false'
        ETHEREUM_JSONRPC_TRACE_URL: http://chain:9545/
        INDEXER_CATCHUP_BLOCKS_BATCH_SIZE: 250
        # SECRET_KEY_BASE: '56NtB48ear7+wMSf0IQuWDAAazhpb31qyc7GiyspBP2vh7t5zlCsF5QDv76chXeN'
        CHAIN_ID: '1773'
        NETWORK: PartyChain
    ports:
      - 4003:4003

  nginx:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - nginx-data:/data

  mcdb:
    image: postgres:14
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "miningcore", "-U", "miningcore" ]
      timeout: 45s
      interval: 10s
      retries: 10
    environment:
        POSTGRES_PASSWORD: 'password'
        POSTGRES_USER: 'miningcore'
        POSTGRES_HOST_AUTH_METHOD: 'trust'
        POSTGRES_DATABASE: miningcore
    ports:
      - 5432:5432
    volumes:
      - ./db:/docker-entrypoint-initdb.d/

  miningcore:
    image: tmjeff/mcmsigner
    restart: always
    depends_on:
      mcdb:
        condition: service_healthy
    user: root
    ports:
      - 4000:4000
      - 4001:4001
      - 4066
      - 4067
      - 4073:4073
    volumes:
      - ./mcconfig.json:/app/config.json
      - dag:/home/dag

volumes:
   redis-data:
   nginx-data:
   dag: